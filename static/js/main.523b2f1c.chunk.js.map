{"version":3,"sources":["data.js","Detail.js","App.js","reportWebVitals.js","index.js"],"names":["id","title","content","price","박스","styled","div","제목","h4","props","색상","Info","재고","Detail","useState","alert","alert변경","inputData","inputData변경","useEffect","타이머","setTimeout","clearTimeout","useParams","history","useHistory","찾은상품","shoes","find","x","console","log","className","onChange","e","target","value","src","width","onClick","재고변경","goBack","Card","i","Loding","App","Data","shoes변경","loding","loding변경","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","as","to","NavDropdown","Item","Divider","exact","path","Jumbotron","Button","variant","map","a","axios","get","then","result","data","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.523b2f1c.chunk.js","sourcesContent":["// 파일을 쪼갤 때 활용하는 import / export\r\n// 내보내기 : export default 변수명\r\n// 가져오기 : import  변수명 from 경로\r\n\r\n// 여러 변수 export 사용 시\r\n// 내보내기 : export { 변수1, 변수2 }\r\n// 가져오기 : import { 변수1, 변수2 } from 경로\r\n// 일반적으로 여러 개를 export 만드는 경우는 없다\r\n\r\nexport default [\r\n    {\r\n        id: 0,\r\n        title: \"White and Black\",\r\n        content: \"Born in France\",\r\n        price: 120000\r\n    },\r\n\r\n    {\r\n        id: 1,\r\n        title: \"Red Knit\",\r\n        content: \"Born in Seoul\",\r\n        price: 110000\r\n    },\r\n\r\n    {\r\n        id: 2,\r\n        title: \"Grey Yordan\",\r\n        content: \"Born in the States\",\r\n        price: 130000\r\n    }\r\n]","/* eslint-disable */\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router\";\r\n// yarn add styled-components\r\nimport styled from 'styled-components';\r\nimport './Detail.scss';\r\n\r\n// yarn add node-sass\r\n// sass : CSS를 프로그래밍언어스럽게 작성가능한 Preprocessor\r\n// CSS에서 변수, 연산자, 함수, extend, import, 이런걸 사용가능\r\n// 브라우저는 SASS 문법을 몰라요\r\n// SASS로 작성한 파일을 다시 CSS로 컴파일해야한다. (node-sass 설치하면 알아서 해줌)\r\n\r\n\r\n// CSS를 미리 입혀놓은 컴포넌트 (ClassName 작명 필요없음)\r\nlet 박스 = styled.div`\r\n    padding : 20px;\r\n`;\r\n\r\nlet 제목 = styled.h4`\r\n    font-size : 25px;\r\n    // 색깔만 다른 제목이 여러개 필요하다면?\r\n    color : ${props => props.색상}\r\n`;\r\n\r\n// Hook으로 컴포넌트의 인생 중간중간에 뭔가 명령을 줄수 있음 ✔\r\n// e.g) <Detail> 퇴장 전에 이것좀 해주세요.\r\n\r\n// 이전 문법\r\n// Lifecycle Hook 몇개 (원래는 class 컴포넌트만 사용가능)\r\n// class Detail2 extends React.Component {\r\n\r\n//   // Detail2 컴포넌트가 Mount되었을 때 실행할 코드 ~\r\n//   // 랜더링이 됐을때 실행 됌\r\n//   componentDidMount() {\r\n//     //Ajax 같은 것도 이런 곳에 자주 사용\r\n//   }\r\n\r\n//   // Detail2 컴포넌트가 unmount되기 직전에 실행될 코드\r\n//   componentWillUnmount() {\r\n\r\n//   }\r\n// }\r\n\r\n\r\nfunction Detail(props) {\r\n\r\n  // useEffect 훅 1\r\n  // 컴포넌트가 mount 되었을 때 (렌더링이 되었을 때 = 보일 때)\r\n  // 컴포넌트가 update 될 때\r\n\r\n  // useEffect 훅 2\r\n  // 컴포넌트가 사라질 때 코드를 실행시킬 수도 있음\r\n  // return () => { 실행할 코드 ~~}  // unmount가 될때 실행 됌\r\n\r\n  // useEffect 훅 3\r\n  // 여러개를 사용하고 싶다면\r\n\r\n  // UI 만드는법\r\n  // UI 보이고 / 안보이고 상태를 state로 저장\r\n  let [alert, alert변경] = useState(true);\r\n\r\n  let [inputData, inputData변경] = useState('');\r\n\r\n  useEffect(() => {\r\n    //2초 후에 저거 alert 창을 안보이게 해주셈\r\n    let 타이머 = setTimeout(() => { alert변경(false) }, 2000);\r\n\r\n    // setTimeout 이런거 쓸때 주의점\r\n    // 타이머 해제 스킬\r\n    // 오류 난 가능성이 많으니 return 을 사용하면 useEffect 종료 시\r\n    // 타이머를 지운다.\r\n    return () => { clearTimeout(타이머) }\r\n  }, [alert]); // 실행조건을 넣을 수 있다.\r\n  // alert를 넣을 시 alert의 state가 변경이 될때만 실행됌\r\n  // [] 빈칸일시 _가 변경이 될때만 useEffect 실행되라\r\n  // ✔ 팁 : [] 빈칸을 놔두게 되면 <Detail> 등장시 한 번 실행하고 끝남\r\n\r\n\r\n  // 여러개 일때 차례대로 실행이 된다\r\n  useEffect(() => {\r\n\r\n  });\r\n\r\n  // useParams 사용해서 파라미더 전달 가능\r\n  let { id } = useParams();\r\n  let history = useHistory();\r\n  // let 찾은상품 = props.shoes.find(function(상품) {\r\n  //     return 상품.id == id\r\n  // })\r\n  let 찾은상품 = props.shoes.find(x => x.id == id);\r\n\r\n  console.log(\"찾은상품 : \", 찾은상품);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <박스>\r\n        {/* [props 문법]\r\n            보낼이름 = { 변수명 }\r\n            보낼이름 = \"일반문자\" */}\r\n        <제목 className=\"red\">Detail</제목>\r\n      </박스>\r\n      {inputData}\r\n      {/* 입력 할 떄마다 재랜더링이 일어남\r\n          위의 useEffect도 계속 실행되는 문제 ?! \r\n          useEffect에 []에 조건을 넣으면 useEffect가 실행되지 않음*/}\r\n      <input onChange={(e) => { inputData변경(e.target.value) }} />\r\n      {\r\n        alert == true\r\n          ? <div className=\"my-alert2\">\r\n            <p>재고가 얼마 남지 않았습니다.</p>\r\n          </div>\r\n          : null\r\n      }\r\n\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <img src=\"https://codingapple1.github.io/shop/shoes1.jpg\" width=\"100%\" />\r\n        </div>\r\n        <div className=\"col-md-6 mt-4\">\r\n          <h4 className=\"pt-5\">{찾은상품.title}</h4>\r\n          <p>{찾은상품.content}</p>\r\n          <p>{찾은상품.price}원</p>\r\n          <Info 재고={props.재고} />\r\n          <button className=\"btn btn-danger\" onClick={() => {\r\n            // 하위 컴포넌트가 상위 컴포넌트 state변경하려면 state 변경함수 씁니다.\r\n            // 그게 상위 컴포넌트에 있으면 변경함수도 props로 전송해서 쓰셈\r\n            props.재고변경([9, 11, 12])   \r\n          }}>주문하기</button>\r\n          &nbsp;\r\n          <button className=\"btn btn-danger\" onClick={() => {\r\n            history.goBack();\r\n            // history.push('/') : 특정 경로로 이동 시킬 때\r\n          }}>뒤로가기</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction Info(props) {\r\n  return (\r\n    <p>재고 : { props.재고[0] }</p>\r\n  )\r\n}\r\n\r\n\r\nexport default Detail;","/* eslint-disable */\n\nimport './App.css';\nimport { Navbar, Nav, NavDropdown, Button, Jumbotron } from 'react-bootstrap';\nimport { useState } from 'react';\nimport Data from './data.js';\nimport Detail from './Detail.js';\nimport axios from 'axios';\n\n// Route를 만드러보자 (페이지를 나누자)\n// yarn add react-router-dom\nimport { Link, Route, Switch } from 'react-router-dom';\n\n// yarn add styled-components\n\nfunction App() {\n\n  let [shoes, shoes변경] = useState(Data);\n  let [loding, loding변경] = useState(false);\n  let [재고, 재고변경] = useState([10, 11, 12]);\n\n\n\n  return (\n    <div className=\"App\">\n\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand href=\"#home\">Shoe Shop</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          {/* ml-auto 오른쪽으로 위치 */}\n          <Nav className=\"mr-auto\">\n\n            {/* 페이지 이동하는 버튼 만들기\n            - 일단 <Navbar>안의 버튼에 href 지우고\n            - <Link to=\"경로\">버튼</Link>\n            React 문법 Link 경로 입력하면 이동 됨 */}\n            <Nav.Link as={Link} to=\"/\">Home</Nav.Link>\n            <Nav.Link as={Link} to=\"/detail\">Detail</Nav.Link>\n            <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n              <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n            </NavDropdown>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n\n      {/* Switch 안에 담았더니 Route 들이 하나씩만 보임\n          하나만 매칭이 됨 중복 매칭을 허용하지 않겠다. */}\n      <Switch>\n\n        {/* Q. /detail 경로로 접속해도 /경로 내용이 보이는 이유?\n      - 매칭이 되는 것들은 다 보여줘서, /이 포함되는 /detail은 \"/\" 까지도 보여지게됌\n      - 그게 싫은경우 exact 속성 추가하면 경로가 정확히 일치할 떄만 보여줌 */}\n\n        <Route exact path=\"/\">\n          <Jumbotron className=\"background\">\n            <h1>20% season OFF</h1>\n            <p>\n              This is a simple hero unit, a simple jumbotron-style component for calling\n              extra attention to featured content or information.\n        </p>\n            <p>\n              <Button variant=\"primary\">Learn more</Button>\n            </p>\n          </Jumbotron>\n          {/* container : 좌우 여백을 이쁘게 잡아줌 */}\n          <div className=\"container\">\n            <div className=\"row\">\n              {\n                loding == true\n                ? <Loding></Loding>\n                : null\n              }\n              \n              {\n                shoes.map((a, i) => {\n                  return (\n                    <Card shoes={shoes[i]} i={i} key={i}></Card>\n                  )\n                })\n              }\n\n              {/* <Card shoes={shoes[0]}></Card>\n          <Card shoes={shoes[1]}></Card>\n          <Card shoes={shoes[2]}></Card> */}\n\n              {/* <div className=\"col-md-4\">\n            <img src=\"https://codingapple1.github.io/shop/shoes1.jpg\"\n              width=\"100%\" />\n            <h4>{ shoes[0].title }</h4>\n            <p>{ shoes[0].content } & { shoes[0].price }</p>\n          </div>\n          <div className=\"col-md-4\">\n            <img src=\"https://codingapple1.github.io/shop/shoes2.jpg\"\n              width=\"100%\" />\n            <h4>상품명</h4>\n            <p>상품설명 & 가격</p>\n          </div>\n          <div className=\"col-md-4\">\n            <img src=\"https://codingapple1.github.io/shop/shoes3.jpg\"\n              width=\"100%\" />\n            <h4>상품명</h4>\n            <p>상품설명 & 가격</p>\n          </div> */}\n            </div>\n            <button className=\"btn btn-primary\" onClick={() => {\n\n              // POST 요청 방식\n              // axios.post('서버URL', { id : 'codingapple', pw : 1234 });\n\n              // 로딩중이라는 UI 띄움\n              loding변경(true);\n              // 성공하면 .then()\n              axios.get('https://codingapple1.github.io/shop/data2.json')\n              .then((result) => {\n                // 서버에서 데이터를 받아오면\n                // 로딩중이라는 UI 안보이게 처리\n                loding변경(false);\n                shoes변경( [...shoes, ...result.data ] ); //...연산자는 괄호를 벗겨줍니다.\n                //shoes변경([{},{},{}, {},{},{}]) ... 사용하여 괄호를 벗겨 이런 모양이됌\n              })\n              .catch(() => {\n                // 로딩중이라는 UI 안보이게 처리\n                console.log(\"실패했어요.\");\n              })\n\n            }}>더보기</button>\n          </div>\n        </Route>\n\n        {/* /detail/:id\n        아무문자나 받겠다는 URL 작명법\n        1. 콜론 뒤에 맘대로 작성\n        2. 여러개 사용가능 */}\n        <Route path=\"/detail/:id\">\n          <Detail shoes={shoes} 재고={재고} 재고변경={재고변경} />\n        </Route>\n\n        <Route path=\"/:id\">\n          <div>아무거나 적을때 이거 보여주셈</div>\n        </Route>\n\n      </Switch>\n    </div>\n  );\n}\n\n\nfunction Card(props) {\n  console.log(\"props : \", props);\n  return (\n    <div className=\"col-md-4\">\n      {/* src=\"\" 에다가 데이터 바인딩하려면?\n    src={} 이렇게하면 변수명 함수명 넣기 가능 */}\n      <img src={\"https://codingapple1.github.io/shop/shoes\" + (props.i + 1) + \".jpg\"}\n        width=\"100%\" />\n      <h4>{props.shoes.title}</h4>\n      <p>{props.shoes.content} & {props.shoes.price}</p>\n    </div>\n  )\n\n}\n\nfunction Loding(props) {\n  return (\n    <h4>로딩중</h4>\n  )\n}\n\n// function Item(props) {\n//   props.map(function (shoes, i) {\n//     return (\n//       <div className=\"col-md-4\">\n//         <img src=\"https://codingapple1.github.io/shop/shoes1.jpg\"\n//           width=\"100%\" />\n//         <h4>{props.shoes[i].title}</h4>\n//         <p>{props.shoes[i].content} & {props.shoes[i].price}</p>\n//       </div>\n//     )\n//   })\n// }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { BrowserRouter } from 'react-router-dom';\n\n// BrowserRouter vs HashRouter\n// HashRouter : 라우팅 안전하게 할 수 있게 도와줌 /#/ 기호\n// 사이트 주소 뒤에 #이 붙는데 #뒤에 적는 것은 서버로 전달 X\n// 그래서 라우팅은 리액트가 알아서 잘 해줄 수있음\n\n// BrowserRouter : 라우팅을 리액트가 아니라 서버에게 요청할 수도 있어서 위험\n// 서버 : \"어 그런페이지 없는데요? 할 수 있음\"\n// 서버에서 서버 라우팅 방지하는 API를 작성해줘야함\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}